// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CreateVault extends ethereum.Event {
  get params(): CreateVault__Params {
    return new CreateVault__Params(this);
  }
}

export class CreateVault__Params {
  _event: CreateVault;

  constructor(event: CreateVault) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DestroyVault extends ethereum.Event {
  get params(): DestroyVault__Params {
    return new DestroyVault__Params(this);
  }
}

export class DestroyVault__Params {
  _event: DestroyVault;

  constructor(event: DestroyVault) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TransferVault extends ethereum.Event {
  get params(): TransferVault__Params {
    return new TransferVault__Params(this);
  }
}

export class TransferVault__Params {
  _event: TransferVault;

  constructor(event: TransferVault) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DepositCollateral extends ethereum.Event {
  get params(): DepositCollateral__Params {
    return new DepositCollateral__Params(this);
  }
}

export class DepositCollateral__Params {
  _event: DepositCollateral;

  constructor(event: DepositCollateral) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawCollateral extends ethereum.Event {
  get params(): WithdrawCollateral__Params {
    return new WithdrawCollateral__Params(this);
  }
}

export class WithdrawCollateral__Params {
  _event: WithdrawCollateral;

  constructor(event: WithdrawCollateral) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BorrowToken extends ethereum.Event {
  get params(): BorrowToken__Params {
    return new BorrowToken__Params(this);
  }
}

export class BorrowToken__Params {
  _event: BorrowToken;

  constructor(event: BorrowToken) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PayBackToken extends ethereum.Event {
  get params(): PayBackToken__Params {
    return new PayBackToken__Params(this);
  }
}

export class PayBackToken__Params {
  _event: PayBackToken;

  constructor(event: PayBackToken) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get closingFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BuyRiskyVault extends ethereum.Event {
  get params(): BuyRiskyVault__Params {
    return new BuyRiskyVault__Params(this);
  }
}

export class BuyRiskyVault__Params {
  _event: BuyRiskyVault;

  constructor(event: BuyRiskyVault) {
    this._event = event;
  }

  get vaultID(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountPaid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class QiStablecoin extends ethereum.SmartContract {
  static bind(address: Address): QiStablecoin {
    return new QiStablecoin("QiStablecoin", address);
  }

  stabilityPool(): Address {
    let result = super.call("stabilityPool", "stabilityPool():(address)", []);

    return result[0].toAddress();
  }

  try_stabilityPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stabilityPool",
      "stabilityPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  closingFee(): BigInt {
    let result = super.call("closingFee", "closingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_closingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("closingFee", "closingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultOwner(param0: BigInt): Address {
    let result = super.call("vaultOwner", "vaultOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_vaultOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("vaultOwner", "vaultOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ethPriceSource(): Address {
    let result = super.call("ethPriceSource", "ethPriceSource():(address)", []);

    return result[0].toAddress();
  }

  try_ethPriceSource(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ethPriceSource",
      "ethPriceSource():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createVault(): BigInt {
    let result = super.call("createVault", "createVault():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createVault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createVault", "createVault():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): BigInt {
    let result = super.call("treasury", "treasury():(uint256)", []);

    return result[0].toBigInt();
  }

  try_treasury(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("treasury", "treasury():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openingFee(): BigInt {
    let result = super.call("openingFee", "openingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_openingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("openingFee", "openingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDebtCeiling(): BigInt {
    let result = super.call("getDebtCeiling", "getDebtCeiling():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getDebtCeiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDebtCeiling",
      "getDebtCeiling():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getEthPriceSource(): BigInt {
    let result = super.call(
      "getEthPriceSource",
      "getEthPriceSource():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getEthPriceSource(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEthPriceSource",
      "getEthPriceSource():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vaultExistence(param0: BigInt): boolean {
    let result = super.call(
      "vaultExistence",
      "vaultExistence(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_vaultExistence(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "vaultExistence",
      "vaultExistence(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getClosingFee(): BigInt {
    let result = super.call("getClosingFee", "getClosingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getClosingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getClosingFee",
      "getClosingFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultCount(): BigInt {
    let result = super.call("vaultCount", "vaultCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vaultCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultCount", "vaultCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOpeningFee(): BigInt {
    let result = super.call("getOpeningFee", "getOpeningFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getOpeningFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOpeningFee",
      "getOpeningFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  erc721(): Address {
    let result = super.call("erc721", "erc721():(address)", []);

    return result[0].toAddress();
  }

  try_erc721(): ethereum.CallResult<Address> {
    let result = super.tryCall("erc721", "erc721():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenPriceSource(): BigInt {
    let result = super.call(
      "getTokenPriceSource",
      "getTokenPriceSource():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTokenPriceSource(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenPriceSource",
      "getTokenPriceSource():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPeg(): BigInt {
    let result = super.call("tokenPeg", "tokenPeg():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenPeg(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPeg", "tokenPeg():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultDebt(param0: BigInt): BigInt {
    let result = super.call("vaultDebt", "vaultDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_vaultDebt(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultDebt", "vaultDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultCollateral(param0: BigInt): BigInt {
    let result = super.call(
      "vaultCollateral",
      "vaultCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_vaultCollateral(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultCollateral",
      "vaultCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtCeiling(): BigInt {
    let result = super.call("debtCeiling", "debtCeiling():(uint256)", []);

    return result[0].toBigInt();
  }

  try_debtCeiling(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtCeiling", "debtCeiling():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetTokenPegCall extends ethereum.Call {
  get inputs(): SetTokenPegCall__Inputs {
    return new SetTokenPegCall__Inputs(this);
  }

  get outputs(): SetTokenPegCall__Outputs {
    return new SetTokenPegCall__Outputs(this);
  }
}

export class SetTokenPegCall__Inputs {
  _call: SetTokenPegCall;

  constructor(call: SetTokenPegCall) {
    this._call = call;
  }

  get _tokenPeg(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTokenPegCall__Outputs {
  _call: SetTokenPegCall;

  constructor(call: SetTokenPegCall) {
    this._call = call;
  }
}

export class ChangeEthPriceSourceCall extends ethereum.Call {
  get inputs(): ChangeEthPriceSourceCall__Inputs {
    return new ChangeEthPriceSourceCall__Inputs(this);
  }

  get outputs(): ChangeEthPriceSourceCall__Outputs {
    return new ChangeEthPriceSourceCall__Outputs(this);
  }
}

export class ChangeEthPriceSourceCall__Inputs {
  _call: ChangeEthPriceSourceCall;

  constructor(call: ChangeEthPriceSourceCall) {
    this._call = call;
  }

  get ethPriceSourceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeEthPriceSourceCall__Outputs {
  _call: ChangeEthPriceSourceCall;

  constructor(call: ChangeEthPriceSourceCall) {
    this._call = call;
  }
}

export class BorrowTokenCall extends ethereum.Call {
  get inputs(): BorrowTokenCall__Inputs {
    return new BorrowTokenCall__Inputs(this);
  }

  get outputs(): BorrowTokenCall__Outputs {
    return new BorrowTokenCall__Outputs(this);
  }
}

export class BorrowTokenCall__Inputs {
  _call: BorrowTokenCall;

  constructor(call: BorrowTokenCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowTokenCall__Outputs {
  _call: BorrowTokenCall;

  constructor(call: BorrowTokenCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetClosingFeeCall extends ethereum.Call {
  get inputs(): SetClosingFeeCall__Inputs {
    return new SetClosingFeeCall__Inputs(this);
  }

  get outputs(): SetClosingFeeCall__Outputs {
    return new SetClosingFeeCall__Outputs(this);
  }
}

export class SetClosingFeeCall__Inputs {
  _call: SetClosingFeeCall;

  constructor(call: SetClosingFeeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetClosingFeeCall__Outputs {
  _call: SetClosingFeeCall;

  constructor(call: SetClosingFeeCall) {
    this._call = call;
  }
}

export class TransferVaultCall extends ethereum.Call {
  get inputs(): TransferVaultCall__Inputs {
    return new TransferVaultCall__Inputs(this);
  }

  get outputs(): TransferVaultCall__Outputs {
    return new TransferVaultCall__Outputs(this);
  }
}

export class TransferVaultCall__Inputs {
  _call: TransferVaultCall;

  constructor(call: TransferVaultCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TransferVaultCall__Outputs {
  _call: TransferVaultCall;

  constructor(call: TransferVaultCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class CreateVaultCall extends ethereum.Call {
  get inputs(): CreateVaultCall__Inputs {
    return new CreateVaultCall__Inputs(this);
  }

  get outputs(): CreateVaultCall__Outputs {
    return new CreateVaultCall__Outputs(this);
  }
}

export class CreateVaultCall__Inputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }
}

export class CreateVaultCall__Outputs {
  _call: CreateVaultCall;

  constructor(call: CreateVaultCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCall extends ethereum.Call {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }
}

export class PayBackTokenCall extends ethereum.Call {
  get inputs(): PayBackTokenCall__Inputs {
    return new PayBackTokenCall__Inputs(this);
  }

  get outputs(): PayBackTokenCall__Outputs {
    return new PayBackTokenCall__Outputs(this);
  }
}

export class PayBackTokenCall__Inputs {
  _call: PayBackTokenCall;

  constructor(call: PayBackTokenCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PayBackTokenCall__Outputs {
  _call: PayBackTokenCall;

  constructor(call: PayBackTokenCall) {
    this._call = call;
  }
}

export class DestroyVaultCall extends ethereum.Call {
  get inputs(): DestroyVaultCall__Inputs {
    return new DestroyVaultCall__Inputs(this);
  }

  get outputs(): DestroyVaultCall__Outputs {
    return new DestroyVaultCall__Outputs(this);
  }
}

export class DestroyVaultCall__Inputs {
  _call: DestroyVaultCall;

  constructor(call: DestroyVaultCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DestroyVaultCall__Outputs {
  _call: DestroyVaultCall;

  constructor(call: DestroyVaultCall) {
    this._call = call;
  }
}

export class SetOpeningFeeCall extends ethereum.Call {
  get inputs(): SetOpeningFeeCall__Inputs {
    return new SetOpeningFeeCall__Inputs(this);
  }

  get outputs(): SetOpeningFeeCall__Outputs {
    return new SetOpeningFeeCall__Outputs(this);
  }
}

export class SetOpeningFeeCall__Inputs {
  _call: SetOpeningFeeCall;

  constructor(call: SetOpeningFeeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetOpeningFeeCall__Outputs {
  _call: SetOpeningFeeCall;

  constructor(call: SetOpeningFeeCall) {
    this._call = call;
  }
}

export class SetStabilityPoolCall extends ethereum.Call {
  get inputs(): SetStabilityPoolCall__Inputs {
    return new SetStabilityPoolCall__Inputs(this);
  }

  get outputs(): SetStabilityPoolCall__Outputs {
    return new SetStabilityPoolCall__Outputs(this);
  }
}

export class SetStabilityPoolCall__Inputs {
  _call: SetStabilityPoolCall;

  constructor(call: SetStabilityPoolCall) {
    this._call = call;
  }

  get _pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStabilityPoolCall__Outputs {
  _call: SetStabilityPoolCall;

  constructor(call: SetStabilityPoolCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetDebtCeilingCall extends ethereum.Call {
  get inputs(): SetDebtCeilingCall__Inputs {
    return new SetDebtCeilingCall__Inputs(this);
  }

  get outputs(): SetDebtCeilingCall__Outputs {
    return new SetDebtCeilingCall__Outputs(this);
  }
}

export class SetDebtCeilingCall__Inputs {
  _call: SetDebtCeilingCall;

  constructor(call: SetDebtCeilingCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDebtCeilingCall__Outputs {
  _call: SetDebtCeilingCall;

  constructor(call: SetDebtCeilingCall) {
    this._call = call;
  }
}

export class DepositCollateralCall extends ethereum.Call {
  get inputs(): DepositCollateralCall__Inputs {
    return new DepositCollateralCall__Inputs(this);
  }

  get outputs(): DepositCollateralCall__Outputs {
    return new DepositCollateralCall__Outputs(this);
  }
}

export class DepositCollateralCall__Inputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCollateralCall__Outputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }
}

export class BuyRiskyVaultCall extends ethereum.Call {
  get inputs(): BuyRiskyVaultCall__Inputs {
    return new BuyRiskyVaultCall__Inputs(this);
  }

  get outputs(): BuyRiskyVaultCall__Outputs {
    return new BuyRiskyVaultCall__Outputs(this);
  }
}

export class BuyRiskyVaultCall__Inputs {
  _call: BuyRiskyVaultCall;

  constructor(call: BuyRiskyVaultCall) {
    this._call = call;
  }

  get vaultID(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuyRiskyVaultCall__Outputs {
  _call: BuyRiskyVaultCall;

  constructor(call: BuyRiskyVaultCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get ethPriceSourceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minimumCollateralPercentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get vaultAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
